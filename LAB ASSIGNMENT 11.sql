CREATE TABLE STUDENT(ROLLNO INT,NAME VARCHAR(100),AGE INT,MARK1 NUMBER,MARK2 NUMBER,MARK3 NUMBER,TOTAL NUMBER);
INSERT INTO STUDENT VALUES(1,'ABC',26,90,66,77,0);
INSERT INTO STUDENT VALUES(2,'DEF',22,50,55,72,0);
INSERT INTO STUDENT VALUES(3,'GHI',28,72,97,54,0);
INSERT INTO STUDENT VALUES(4,'JKL',30,41,44,79,0);
INSERT INTO STUDENT VALUES(5,'MNO',21,91,81,88,0);
INSERT INTO STUDENT VALUES(6,'PQR',29,60,75,63,0);

CREATE TABLE MINOR AS SELECT * FROM STUDENT WHERE 1=0;


Q1.
DECLARE
	CURSOR C1 IS SELECT * FROM STUDENT WHERE AGE>25;
BEGIN
	FOR REC IN C1 LOOP
    	INSERT INTO MINOR VALUES(REC.ROLLNO,REC.NAME,REC.AGE,REC.MARK1,REC.MARK2,REC.MARK3,REC.TOTAL);
		DELETE FROM STUDENT WHERE ROLLNO=REC.ROLLNO;
	END LOOP;
END;
/

Q2.
DECLARE 
	CURSOR C1 IS SELECT ROLLNO,MARK1,MARK2,MARK3 FROM STUDENT;
	VAL STUDENT.TOTAL%TYPE;
	REC C1%ROWTYPE;
BEGIN
    OPEN C1;
	LOOP
    	FETCH C1 INTO REC;
		EXIT WHEN C1%NOTFOUND;
		VAL:=REC.MARK1+REC.MARK2+REC.MARK3;
		UPDATE STUDENT SET TOTAL=VAL WHERE ROLLNO=REC.ROLLNO;
	END LOOP;
	CLOSE C1;
END;
/

Q3.
DECLARE 
	CURSOR C1 IS SELECT * FROM STUDENT;
	COUNTER INT:=0;
BEGIN
	FOR REC IN C1 LOOP
		IF REC.TOTAL>90 THEN
			COUNTER:=COUNTER+1;
			DBMS_OUTPUT.PUT_LINE('ROLLNO '||REC.ROLLNO||' NAME '||REC.NAME||' AGE '||REC.AGE||' TOTAL '||REC.TOTAL);
		END IF;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('COUNT: '||COUNTER);
END;

Q4.
DECLARE
	CURSOR C1 IS SELECT MAX(TOTAL) AS MAXVAL, MIN(TOTAL) AS MINVAL FROM STUDENT;
	REC C1%ROWTYPE;
BEGIN
	OPEN C1;
	FETCH C1 INTO REC;
	DBMS_OUTPUT.PUT_LINE('MAX: '||REC.MAXVAL||' MIN: '||REC.MINVAL);
	CLOSE C1;
END;
/

Q5.
DECLARE
    STNO NUMBER:=0;
	CURSOR C1 IS SELECT * FROM STUDENT;
	AGG STUDENT.TOTAL%TYPE;
BEGIN
	FOR REC IN C1 LOOP
		AGG:=REC.TOTAL/6;
		STNO:=STNO+1;
		DBMS_OUTPUT.PUT_LINE('AVG FOR STUDENT '||STNO||' : '||AGG);
	END LOOP;
END;
/

Q6.
DECLARE 
	CURSOR C1(R NUMBER) IS SELECT * FROM STUDENT WHERE ROLLNO=R;
	REC C1%ROWTYPE;
BEGIN
	OPEN C1(20);
	FETCH C1 INTO REC;
	DBMS_OUTPUT.PUT_LINE('RNO: '||REC.ROLLNO||' NAME: '||REC.NAME||' AGE: '||REC.AGE);
	CLOSE C1;
END;
/

--WITH EXCEPTION HANDLING:
DECLARE 
    EX1 EXCEPTION;
	PRAGMA EXCEPTION_INIT(EX1,100);
	CURSOR C1(R NUMBER) IS SELECT * FROM STUDENT WHERE ROLLNO=R;
	REC C1%ROWTYPE;
BEGIN
	OPEN C1(20);
	FETCH C1 INTO REC;
	IF C1%NOTFOUND THEN
        RAISE EX1;
	END IF;
	DBMS_OUTPUT.PUT_LINE('RNO: '||REC.ROLLNO||' NAME: '||REC.NAME||' AGE: '||REC.AGE);
	CLOSE C1;
EXCEPTION
    WHEN EX1 THEN
    	DBMS_OUTPUT.PUT_LINE('NO DATA');
END;
/





CREATE TABLE EMP(EMPNO INT,ENAME VARCHAR(200),JOB VARCHAR(100),SALARY NUMBER,DEPTNO INT);
INSERT INTO EMP VALUES(1,'ABC','XYZ',9000,10);
INSERT INTO EMP VALUES(2,'DEF','UVW',50000,20);
INSERT INTO EMP VALUES(3,'GHI','RST',7250,30);
INSERT INTO EMP VALUES(4,'JKL','BGF',41000,10);
INSERT INTO EMP VALUES(5,'MNO','LMN',9100,20);
INSERT INTO EMP VALUES(6,'PQR','KAW',60000,30);	

Q7.
DECLARE 
    ENO EMP.EMPNO%TYPE;
	NAME EMP.ENAME%TYPE;
	EJOB EMP.JOB%TYPE;
	ESAL EMP.SALARY%TYPE;
	EDEP EMP.DEPTNO%TYPE;
	CURSOR C1 IS SELECT * FROM EMP;
	REC C1%ROWTYPE;
BEGIN
    OPEN C1;
	LOOP
        FETCH C1 INTO REC;
		EXIT WHEN C1%NOTFOUND;
		ENO:=REC.EMPNO;
		NAME:=REC.ENAME;
		EJOB:=REC.JOB;
		ESAL:=REC.SALARY;
		EDEP:=REC.DEPTNO;
		DBMS_OUTPUT.PUT_LINE('ENO: '||ENO||' NAME: '||NAME||' JOB '||EJOB||' SAL: '||ESAL||' DEPT: '||EDEP);
	END LOOP;
CLOSE C1;
END;
/
	

Q8.
-- CREATE OR REPLACE FUNCTION DETS(DNO IN INTEGER) RETURN SYS_REFCURSOR IS
-- C1 SYS_REFCURSOR ;/*(D_NO INTEGER) IS SELECT EMPNO,ENAME,JOB FROM EMP WHERE DEPTNO=D_NO;*/
-- -- REC C1%ROWTYPE;
-- BEGIN
-- 	OPEN C1 FOR SELECT EMPNO,ENAME,JOB FROM EMP WHERE DEPTNO=DNO;
-- 	-- FETCH C1 INTO REC;
-- 	-- CLOSE C1;
-- 	RETURN C1;
-- END;
-- /

DECLARE
    C2 SYS_REFCURSOR;
	EREC C2%ROWTYPE;
BEGIN
	C2:=DETS(3);
	-- OPEN C2;
	
	FETCH C2 INTO EREC;
	DBMS_OUTPUT.PUT_LINE('ENO: '||EREC.EMPNO||' NAME: '||EREC.ENAME||' JOB: '||EREC.JOB);
	CLOSE C2;
END;
/

Q9.
DECLARE 
    NUM INTEGER:=3;
    PROCEDURE HIGHESTPAID(N IN INTEGER)
    AS
    CURSOR C1 IS SELECT * FROM EMP ORDER BY SALARY DESC;
    REC C1%ROWTYPE;
    BEGIN
        OPEN C1;
        FOR I IN 1..N LOOP
        	FETCH C1 INTO REC;
        	DBMS_OUTPUT.PUT_LINE('ENO: '||REC.EMPNO||' NAME: '||REC.ENAME);
        END LOOP;
    CLOSE C1;
    END HIGHESTPAID;
BEGIN
	HIGHESTPAID(4);
END;
/

DECLARE 
    NUM INTEGER:=3;
    PROCEDURE HIGHESTPAID(N IN INTEGER)
    AS
    CURSOR C1(N INTEGER) IS SELECT * FROM EMP ORDER BY SALARY DESC FETCH FIRST N ROWS ONLY;
    BEGIN
        -- OPEN C1(N);
        FOR REC IN C1(N) LOOP /* OR FOR I IN 1..N LOOP */
        	-- FETCH C1 INTO REC;
        	DBMS_OUTPUT.PUT_LINE('ENO: '||REC.EMPNO||' NAME: '||REC.ENAME);
        END LOOP;
    -- CLOSE C1;
    END HIGHESTPAID;
BEGIN
	HIGHESTPAID(5);
END;
/
	
Q10.
DECLARE
	EX1 EXCEPTION;
	EX2 EXCEPTION;
	EX3 EXCEPTION;
	REC EMP%ROWTYPE;
	VREC EMP.ENAME%TYPE;
BEGIN
	SELECT * INTO REC FROM EMP WHERE EMPNO=2;
	SELECT ENAME INTO VREC FROM EMP WHERE EMPNO = 2;
	SELECT * 
	IF REC.SALARY<100000 THEN
		RAISE EX1;
	END IF;
	IF LENGTH(VREC)<5 THEN
		RAISE EX2;
	END IF;
EXCEPTION
	WHEN EX1 THEN
		DBMS_OUTPUT.PUT_LINE('GAREEB');
	WHEN EX2 THEN
		DBMS_OUTPUT.PUT_LINE('AALAS');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('BHAGWAN JAANE');
END;
/